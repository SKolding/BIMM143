---
title: "Class8: Breast Cancer Mini Project"
author: "Sabrina Koldinger (A16368238)"
format: pdf
editor: visual
---

Before we get stuck into project work we will have a quick look at applying PCA to some example of RNAseq data.

Read the data
```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

Q: Howmand gene are in this data set?
```{r}
nrow(rna.data)
```

## Run PCA
```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```



```{r}
summary(pca)
```

```{r}
pca$x
```
```{r}
# We have 5 wt and 5 Ko samples
mycols= c(rep("blue",5), rep("red", 5))
mycols
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", col=mycols)

```

I could also examin which genes contribute most to this first PC.

```{r}
head(sort(abs(pca$rotation[,1]), decreasing=T))
```

# Analysis of Breast Cancer data


```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
head(wisc.df)
```

Note that the first column here wisc.df$diagnosis is a pathologist provided expert diagnosis. 

```{r}
diagnosis= as.factor(wisc.df$diagnosis)
diagnosis
```


```{r}
wisc.data= wisc.df[,-1]
head(wisc.data)
```

Q1. How many observations are in this dataset?
```{r}
ncol(wisc.df)
```



Q2. How many of the observations have a malignant diagnosis?
```{r}
table(wisc.df$diagnosis)
```


Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.data) 
grep("_mean", colnames(wisc.data))
```
```{r}
length(grep("_mean", colnames(wisc.data)))
```

## Principal Component Analysis

Here we will use `prcomp()` on the `wisc.data` object -the one without the diagnosis column. 
First, we have to decide whether to use the `scale=T` argument when we run `prcomp()`. 


```{r}
# Check column means and standard deviations
colMeans(wisc.data)
```
```{r}
apply(wisc.data,2,sd)
```

These are  very different so we should scale=TRUE.

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp( wisc.data, scale=TRUE )
summary((wisc.pr))
```

Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
44.27%

Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
3 PCs to capture 72.60% variance

Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
7 PCs to capture 91.01%

```{r}
attributes(wisc.pr)
```
```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis )
```

```{r}
library(ggplot2)

pc= as.data.frame(wisc.pr$x)

ggplot(pc)+ aes(PC1, PC2, col=diagnosis)+ geom_point()
```

Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?
```{r}
wisc.pr$rotation["concave.points_mean",1]
```



Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?
```{r}
tbl=summary(wisc.pr)
which(tbl$importance[3,]>0.8)
```
5 PCs are necessary

## Heirarchical clustering
The main function for Hierarchical clustering is called hclust() it takes a distance matrix as input.
```{r}
d= dist(scale(wisc.data))
wisc.hclust= hclust(d)
plot(wisc.hclust)
```

```{r}
grps=cutree(wisc.hclust, h=18)
table(grps)
```

Come back here later to see how our cluster grps corespond to M or B groups. 

## Combining methods 
Here we will perform clustering on out PCA results rather than the original data. We will cluster using `wisc.pr$x` - our new better variables or PCs. We can chose as many or as few PCs to used as we like. 

```{r}
d.pc=dist(wisc.pr$x[,1:3])
wisc.pr.hclust= hclust(d.pc, method="ward.D2")
plot(wisc.pr.hclust)
abline(h=80, col="red")
```


```{r}
grps=cutree(wisc.pr.hclust, h=80)
table(grps)
```

We can use `table()` to make a cross-table as well as just a count table.
```{r}
table(diagnosis)
```

```{r}
table(grps,diagnosis)
```
The data shows that the clusters have some overlap with Malignant cancer cells(M) in mostly cluster 1 and cluster 2 containing mostly benign cells(B).

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```
```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")

```

Q18. Which of these new patients should we prioritize for follow up based on your results?
Prioritize group 1 
